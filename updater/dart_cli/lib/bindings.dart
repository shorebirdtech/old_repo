// This entire file could be easily autogenerated.

import 'dart:ffi' as ffi;
import 'dart:io' show Directory, Platform;

import 'package:ffi/ffi.dart';
import 'package:path/path.dart' as path;

typedef _CheckForUpdateFunc = ffi.Bool Function(
    ffi.Pointer<Utf8> clientId, ffi.Pointer<Utf8> cacheDir);
typedef CheckForUpdate = bool Function(
    ffi.Pointer<Utf8> clientId, ffi.Pointer<Utf8> cacheDir);

typedef _GetStringFunc = ffi.Pointer<Utf8> Function(
    ffi.Pointer<Utf8> clientId, ffi.Pointer<Utf8> cacheDir);
typedef GetStringFunc = ffi.Pointer<Utf8> Function(
    ffi.Pointer<Utf8> clientId, ffi.Pointer<Utf8> cacheDir);

typedef _FreeStringFunc = ffi.Void Function(ffi.Pointer<Utf8> str);
typedef FreeStringFunc = void Function(ffi.Pointer<Utf8> str);

class UpdaterBindings {
  final ffi.DynamicLibrary _updater;

  late CheckForUpdate checkForUpdate;
  late GetStringFunc activeVersion;
  late GetStringFunc activePath;
  late FreeStringFunc freeString;

  static ffi.DynamicLibrary loadLibrary(String directory, String name) {
    if (Platform.isMacOS) {
      return ffi.DynamicLibrary.open(path.join(directory, 'lib$name.dylib'));
    }
    if (Platform.isWindows) {
      return ffi.DynamicLibrary.open(path.join(directory, '$name.dll'));
    }
    // Assume everything else follows the Linux pattern.
    return ffi.DynamicLibrary.open(path.join(directory, 'lib$name.so'));
  }

  UpdaterBindings()
      : _updater = loadLibrary(
            path.join(Directory.current.path, 'target', 'debug'), "updater") {
    checkForUpdate =
        _updater.lookupFunction<_CheckForUpdateFunc, CheckForUpdate>(
            'check_for_update');
    activeVersion = _updater
        .lookupFunction<_GetStringFunc, GetStringFunc>('active_version');
    activePath =
        _updater.lookupFunction<_GetStringFunc, GetStringFunc>('active_path');
    freeString =
        _updater.lookupFunction<_FreeStringFunc, FreeStringFunc>('free_string');
  }
}
