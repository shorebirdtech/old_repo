// Generated by `dart run shorebird generate`.
import 'dart:core';

import 'package:shorebird/datastore.dart';
import 'package:shorebird/handler.dart';
import 'package:shorebird/shorebird.dart';
import 'package:simple_rpc/model.dart';

import '../endpoints.dart';
import 'handlers.dart';

class SendmessageArgs {
  SendmessageArgs(
    this.message,
    this.stampColor,
  );

  SendmessageArgs.fromJson(Map<String, dynamic> json)
      : message = Message.fromJson(json['message']),
        stampColor = (json['stampColor'] as String);

  final Message message;

  final String stampColor;

  Map<String, dynamic> toJson() => {
        'message': message.toJson(),
        'stampColor': stampColor,
      };
}

class ChangemessagetextArgs {
  ChangemessagetextArgs(
    this.messageId,
    this.messageText,
  );

  ChangemessagetextArgs.fromJson(Map<String, dynamic> json)
      : messageId = ObjectId.fromHexString(json['messageId']),
        messageText = (json['messageText'] as String);

  final ObjectId messageId;

  final String messageText;

  Map<String, dynamic> toJson() => {
        'messageId': messageId.toJson(),
        'messageText': messageText,
      };
}

List<Handler> allHandlers = <Handler>[
  Handler.simpleCall(
    '/sendMessage',
    (
      context,
      json,
    ) async {
      final args = SendmessageArgs.fromJson(json);
      final result = await sendMessage(
        context,
        args.message,
        args.stampColor,
      );
      return Response.primitive(result.toJson());
    },
  ),
  Handler.simpleCall(
    '/changeMessageText',
    (
      context,
      json,
    ) async {
      final args = ChangemessagetextArgs.fromJson(json);
      await changeMessageText(
        context,
        args.messageId,
        args.messageText,
      );
      return Response.ok();
    },
  ),
  Handler.stream(
    '/newMessages',
    (
      context,
      json,
    ) {
      return newMessages(context).asyncMap((element) => element.toJson());
    },
  ),
];
